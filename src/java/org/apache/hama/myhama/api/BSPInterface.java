/**
 * copyright 2011-2016
 */
package org.apache.hama.myhama.api;

import org.apache.hama.myhama.api.MsgRecord;
import org.apache.hama.myhama.util.Context;

/**
 * BSPInterface defines the basic operations to 
 * implement a given BSP algorithm.
 * 
 * @author 
 * @version 0.1
 * 
 * @param <V> vertex value
 * @param <W> edge weight
 * @param <M> message value
 * @param <I> graph information
 */
public interface BSPInterface<V, W, M, I> {
	/**
	 * Setup befor running this task.
	 * Do nothing as default.
	 * @param context
	 */
	public void taskSetup(Context<V, W, M, I> context);
	
	/**
	 * Setup befor starting a new superstep.
	 * Do nothing as default.
	 * @param context
	 */
	public void superstepSetup(Context<V, W, M, I> context);
	
	/**
	 * Setup before processing vertices in one VBlock.
	 * @param context
	 * @return
	 */
	public void vBlockSetup(Context<V, W, M, I> context);
	
	/**
	 * A vertex-centric function to update a given vertex value. 
	 * Messages sent to the given vetex are available if any. 
	 * Users can guide the vertex behaviours by invoking some 
	 * special functions, like {@link Context}.voteToHalt() and 
	 * .setRespond(). It must be implemented by users.
	 */
	public void update(Context<V, W, M, I> context);
	
	/**
	 * A vertex-centric function to generate messages based on 
	 * the given vertex. When running PULL, this function is 
	 * invoked to respond pulling requests, if and only if the 
	 * given vertex is set as "respond" by {@link Context}.setRespond() 
	 * at the previous superstep. For PUSH, messages are usually 
	 * immediately generated right after the vertex is updated in 
	 * update() at the current superstep. An exception for the latter 
	 * is that if the mini-superstep function is enabled, all possible 
	 * vertices are updated at the first mini-superstep, while, 
	 * messages are generated at the second mini-superstep.    
	 * This fuction must be implemented by users.
	 * @param context
	 * @return null if no message is generated
	 */
	public MsgRecord<M>[] getMessages(Context<V, W, M, I> context);
	
	/**
	 * Estimate the number of messages generated by the given vertex. 
	 * Generally, the estimation depends on the (out-)degree and specific 
	 * computing logic. This function is only invoked for vertex with 
	 * "respond=true" and makes sense in the mini-superstep. 
	 * @param context
	 * @return 0 as default
	 */
	public int estimateNumberOfMessages(Context<V, W, M, I> context);
	
	/**
	 * Cleanup after processing vertices in one VBlock.
	 * Do nothing as default.
	 * @param context
	 */
	public void vBlockCleanup(Context<V, W, M, I> context);
	
	/**
	 * Cleanup after accomplishing one superstep.
	 * Do nothing as default.
	 * @param context
	 */
	public void superstepCleanup(Context<V, W, M, I> context);
	
	/**
	 * Cleanup after accomplishing this task.
	 * Do nothing as default.
	 * @param context
	 */
	public void taskCleanup(Context<V, W, M, I> context);
}
